name: Windows Build

on:
  push:
    branches:
      - try_github_actions
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      BLENDER_VERSION: "4.5.0-alpha"
      BUILD_TYPE: "Release"
      CUDA_INSTALLER_URL: "https://developer.download.nvidia.com/compute/cuda/12.9.0/local_installers/cuda_12.9.0_576.02_windows.exe"
      OPTIX_ZIP_URL:      "https://developer.download.nvidia.com/redist/optix/v7.4/OptiX-7.4.0-Include.zip"
      ONEAPI_ZIP_URL:     "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/b8bd9d0d-bc17-4089-85b3-73575cde0c92/w_ocloc_p_2025.1.7.4.zip"
      OPTIX_ROOT_DIR:     "C:\\optix"
      OCLOC_INSTALL_DIR:  "C:\\ocloc"

    steps:
      - name: Install Git LFS
        run: git lfs install --skip-repo

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          lfs: false

      - name: Fetch Gitea LFS objects
        shell: bash
        run: |
          git config lfs.url https://projects.blender.org/blender/blender.git/info/lfs
          git lfs pull
          git submodule foreach --recursive " \
            git config lfs.url https://projects.blender.org/blender/blender.git/info/lfs; \
            git lfs pull \
          "

      - name: Verify datafiles
        shell: pwsh
        run: |
          $f = "release/datafiles/startup.blend"
          if (!(Test-Path $f)) {
            Write-Error "$f not found—check your fork structure!"
            exit 1
          }
          if ((Get-Item $f).Length -lt 10240) {
            Write-Error "$f is too small—still a pointer file?"
            exit 1
          }

      # ──────────────────────────────────────────────────────────────────────────
      # CUDA Toolkit download with progress
      - name: Download CUDA Toolkit 12.9 (with progress)
        shell: bash
        run: |
          curl -L --progress-bar -o cuda-installer.exe "$CUDA_INSTALLER_URL"

      - name: Install CUDA Toolkit 12.9 silently
        shell: pwsh
        run: |
          Start-Process .\cuda-installer.exe `
            -ArgumentList "-toolkit","-silent" `
            -Wait

      # ──────────────────────────────────────────────────────────────────────────
      # OptiX SDK download with progress
      - name: Download OptiX SDK 7.4 (with progress)
        shell: bash
        run: |
          curl -L --progress-bar -o optix.zip "$OPTIX_ZIP_URL"

      - name: Extract OptiX SDK
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path $env:OPTIX_ROOT_DIR -Force
          Expand-Archive .\optix.zip -DestinationPath $env:OPTIX_ROOT_DIR

      # ──────────────────────────────────────────────────────────────────────────
      # OneAPI offline compiler download with progress
      - name: Download OneAPI Offline Compiler (with progress)
        shell: bash
        run: |
          curl -L --progress-bar -o ocloc.zip "$ONEAPI_ZIP_URL"

      - name: Extract OneAPI Offline Compiler
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path $env:OCLOC_INSTALL_DIR -Force
          Expand-Archive .\ocloc.zip -DestinationPath $env:OCLOC_INSTALL_DIR

      # ──────────────────────────────────────────────────────────────────────────
      # Precompiled libs (Python helper)
      - name: Fetch precompiled libraries
        shell: pwsh
        run: python build_files/utils/make_update.py --architecture="amd64"

      # ──────────────────────────────────────────────────────────────────────────
      # Configure CMake with GPU support
      - name: Configure CMake
        shell: bash
        run: |
          mkdir build_windows && cd build_windows
          cmake .. \
            -C "../build_files/buildbot/config/blender_windows.cmake" \
            -G "Visual Studio 17 2022" \
            -A x64 \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DWITH_INSTALL_PORTABLE=ON \
            \
            -DWITH_CYCLES_CUDA_BINARIES=ON \
            -DCYCLES_CUDA_BINARIES_ARCH="sm_75;sm_80;sm_86" \
            -DWITH_CYCLES_DEVICE_OPTIX=ON \
            -DOPTIX_ROOT_DIR="${{ env.OPTIX_ROOT_DIR }}" \
            -DWITH_CYCLES_DEVICE_ONEAPI=ON \
            -DWITH_CYCLES_ONEAPI_BINARIES=ON \
            -DOCLOC_INSTALL_DIR="${{ env.OCLOC_INSTALL_DIR }}"

      # ──────────────────────────────────────────────────────────────────────────
      # Build & install
      - name: Build and Install
        shell: bash
        run: |
          cd build_windows
          cmake --build . --config ${{ env.BUILD_TYPE }} --target install --parallel

      - name: Verify installation
        shell: pwsh
        run: |
          if (-not (Test-Path "install/blender.exe")) {
            Write-Error "blender.exe missing!"
            exit 1
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: blender-windows-${{ env.BLENDER_VERSION }}
          path: install
