name: Windows Build

on:
  push:
    branches:
      - try_github_actions
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      BLENDER_VERSION: "4.5.0-alpha"
      BUILD_TYPE: "Release"
      BLENDER_LIB: "${{ github.workspace }}/lib/windows_x64"

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Git LFS & fetch datafiles
        shell: bash
        run: |
          git lfs install --skip-repo
          git config lfs.url https://projects.blender.org/blender/blender.git/info/lfs
          git lfs pull
          # sanity-check
          test -s release/datafiles/startup.blend

      - name: Fetch precompiled libraries (make_update.py)
        shell: powershell
        run: python build_files/utils/make_update.py --architecture="amd64"

      # --- CUDA Toolkit via direct download & silent install ---
      - name: Download CUDA 12.9 installer
        shell: powershell
        run: |
          Invoke-WebRequest `
            -Uri https://developer.download.nvidia.com/compute/cuda/12.9.0/local_installers/cuda_12.9.0_576.02_windows.exe `
            -OutFile cuda_installer.exe
      - name: Install CUDA silently
        shell: cmd
        run: |
          cuda_installer.exe -s nvcc,cuda,driver
      - name: Expose CUDA env vars
        shell: powershell
        run: |
          $root="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.9"
          echo "CUDA_TOOLKIT_ROOT_DIR=$($root -replace '\\','/')" >> $env:GITHUB_ENV
          echo "WITH_CYCLES_CUDA_BINARIES=ON"          >> $env:GITHUB_ENV
          echo "CYCLES_CUDA_BINARIES_ARCH=sm_50;sm_60;sm_70;sm_80;sm_86" >> $env:GITHUB_ENV

      # --- OptiX SDK ---
      - name: Download OptiX SDK 7.4
        shell: pwsh
        run: |
          $z="OptiX.zip"; Invoke-WebRequest https://developer.download.nvidia.com/redist/optix/v7.4/OptiX-7.4.0-Include.zip -OutFile $z
          Expand-Archive $z -DestinationPath C:\OptiX
          echo "WITH_CYCLES_DEVICE_OPTIX=ON"     >> $env:GITHUB_ENV
          echo "OPTIX_ROOT_DIR=C:/OptiX"        >> $env:GITHUB_ENV

      # --- Intel oneAPI Offline Compiler (ocloc) ---
      - name: Fetch Intel offline compiler
        shell: pwsh
        run: |
          $z="ocloc.zip"; Invoke-WebRequest https://registrationcenter-download.intel.com/akdlm/IRC_NAS/b8bd9d0d-bc17-4089-85b3-73575cde0c92/w_ocloc_p_2025.1.7.4.zip -OutFile $z
          Expand-Archive $z -DestinationPath ocloc_tmp
          Copy-Item ocloc_tmp/**/ocloc.exe $env:GITHUB_WORKSPACE/ocloc_tool
          echo "OCLOC_INSTALL_DIR=${{ github.workspace }}/ocloc_tool" >> $env:GITHUB_ENV
          echo "WITH_CYCLES_DEVICE_ONEAPI=ON"       >> $env:GITHUB_ENV
          echo "WITH_CYCLES_ONEAPI_BINARIES=ON"     >> $env:GITHUB_ENV
          echo "CYCLES_ONEAPI_INTEL_BINARIES_ARCH=" >> $env:GITHUB_ENV

      - name: Debug Environment
        shell: pwsh
        run: |
          Get-ChildItem Env:CUDA*; Get-ChildItem Env:OPTIX*; Get-ChildItem Env:OCLOC*
      
      # --- Configure & build with Ninja and GPU support ---
      - name: Configure CMake (Ninja)
        shell: bash
        run: |
          mkdir build && cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DWITH_INSTALL_PORTABLE=ON \
            -DWITH_CYCLES_CUDA_BINARIES=${{ env.WITH_CYCLES_CUDA_BINARIES }} \
            -DCYCLES_CUDA_BINARIES_ARCH="${{ env.CYCLES_CUDA_BINARIES_ARCH }}" \
            -DWITH_CYCLES_DEVICE_OPTIX=${{ env.WITH_CYCLES_DEVICE_OPTIX }} \
            -DOPTIX_ROOT_DIR=${{ env.OPTIX_ROOT_DIR }} \
            -DWITH_CYCLES_DEVICE_ONEAPI=${{ env.WITH_CYCLES_DEVICE_ONEAPI }} \
            -DWITH_CYCLES_ONEAPI_BINARIES=${{ env.WITH_CYCLES_ONEAPI_BINARIES }} \
            -DOCLOC_INSTALL_DIR=${{ env.OCLOC_INSTALL_DIR }}

      - name: Build & install
        shell: bash
        run: |
          cd build
          ninja install

      - name: Verify GPU kernels in install
        shell: pwsh
        run: |
          gci install -Filter "cycles_kernel*.dll" -Recurse |
            Format-Table Name, Length

      - uses: actions/upload-artifact@v4
        with:
          name: blender-windows-${{ env.BLENDER_VERSION }}
          path: install
