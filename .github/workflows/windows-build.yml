name: Windows Build

on:
  push:
    branches:
      - try_github_actions
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      BLENDER_VERSION: "4.5.0-alpha"
      BUILD_TYPE: "Release"
      # BLENDER_LIB for make_update.py and other Blender scripts
      BLENDER_LIB: "${{ github.workspace }}/lib/windows_x64"

    steps:
      - name: Install Git LFS
        run: git lfs install --skip-repo
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          lfs: false

      - name: Fetch Main Repository LFS objects
        shell: bash
        run: |
          git config lfs.url https://projects.blender.org/blender/blender.git/info/lfs
          git lfs pull

      - name: Verify datafiles
        shell: pwsh
        run: |
          $f = "release/datafiles/startup.blend"
          if (!(Test-Path $f)) {
            Write-Error "$f not found—check your fork structure!"
            exit 1
          }
          if ((Get-Item $f).Length -lt 10240) {
            Write-Error "$f is too small—still a pointer file?"
            exit 1
          }

      - name: Fetch precompiled libraries (managed by make_update.py)
        shell: powershell
        run: python build_files/utils/make_update.py --architecture="amd64"

      # --- Install External SDKs for GPU Backends ---

      - name: Download and Install NVIDIA CUDA Toolkit
        shell: pwsh
        timeout-minutes: 15
        run: |
          $cuda_url = "https://developer.download.nvidia.com/compute/cuda/12.9.0/local_installers/cuda_12.9.0_576.02_windows.exe"
          $cuda_installer = "cuda_installer.exe"
          $cuda_install_path = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.9"
          Write-Host "Downloading CUDA Toolkit from $cuda_url"
          Invoke-WebRequest -Uri $cuda_url -OutFile $cuda_installer
          Write-Host "Installing CUDA Toolkit silently to $cuda_install_path..."
          Start-Process -FilePath $cuda_installer -ArgumentList "/s /NVSDK_PATH=$cuda_install_path" -Wait
          Write-Host "CUDA Toolkit installation complete."
          $cuda_install_path_cmake = $cuda_install_path.Replace("\", "/")
          # Set for subsequent steps via GITHUB_ENV
          echo "CUDA_TOOLKIT_ROOT_DIR=$cuda_install_path_cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "CUDA_PATH=$cuda_install_path_cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 # Commonly used by FindCUDA
          Write-Host "CUDA_TOOLKIT_ROOT_DIR and CUDA_PATH set for job environment."
          # Add CUDA bin to PATH for any tools that might need it (e.g., nvcc if used directly in compilation)
          $env:Path = "$cuda_install_path\bin;$cuda_install_path\libnvvp;" + $env:Path
          Write-Host "CUDA bin and libnvvp added to PATH for this session."

      - name: Download and Extract NVIDIA OptiX SDK
        shell: pwsh
        run: |
          $optix_url = "https://developer.download.nvidia.com/redist/optix/v7.4/OptiX-7.4.0-Include.zip"
          $optix_zip = "OptiX-SDK.zip"
          $optix_install_path = "C:\OptiX_SDK_7_4"
          Write-Host "Downloading OptiX SDK from $optix_url"
          Invoke-WebRequest -Uri $optix_url -OutFile $optix_zip
          Write-Host "Extracting OptiX SDK to $optix_install_path"
          Expand-Archive -Path $optix_zip -DestinationPath $optix_install_path -Force
          $extracted_subfolder = Get-ChildItem -Path $optix_install_path | Where-Object { $_.PSIsContainer } | Select-Object -First 1
          if ($extracted_subfolder) {
            Write-Host "Moving contents from $($extracted_subfolder.FullName) to $optix_install_path"
            Move-Item -Path "$($extracted_subfolder.FullName)\*" -Destination $optix_install_path -Force
            Remove-Item -Path $extracted_subfolder.FullName -Recurse -Force
          }
          Write-Host "OptiX SDK extraction complete."
          $optix_install_path_cmake = $optix_install_path.Replace("\", "/")
          # Set for subsequent steps via GITHUB_ENV
          echo "OPTIX_ROOT_DIR=$optix_install_path_cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "OPTIX_DIR=$optix_install_path_cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 # Commonly used by FindOptiX
          Write-Host "OPTIX_ROOT_DIR and OPTIX_DIR set for job environment."

      - name: Download and Place Intel OneAPI `ocloc.exe`
        shell: pwsh
        run: |
          $ocloc_url = "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/b8bd9d0d-bc17-4089-85b3-73575cde0c92/w_ocloc_p_2025.1.7.4.zip"
          $ocloc_zip = "ocloc.zip"
          $ocloc_extract_dir = "ocloc_temp"
          $ocloc_final_path = "${{ github.workspace }}\ocloc_tool"
          Write-Host "Downloading ocloc.exe from $ocloc_url"
          Invoke-WebRequest -Uri $ocloc_url -OutFile $ocloc_zip
          Write-Host "Extracting ocloc.exe to $ocloc_extract_dir"
          Expand-Archive -Path $ocloc_zip -DestinationPath $ocloc_extract_dir -Force
          $ocloc_source_path = Get-ChildItem -Path $ocloc_extract_dir -Filter "ocloc.exe" -Recurse | Select-Object -ExpandProperty FullName
          
          if ($ocloc_source_path) {
            New-Item -ItemType Directory -Force -Path $ocloc_final_path
            Copy-Item -Path $ocloc_source_path -Destination $ocloc_final_path -Force
            Write-Host "ocloc.exe placed in $ocloc_final_path"
            $ocloc_final_path_cmake = $ocloc_final_path.Replace("\", "/")
            # Set for subsequent steps via GITHUB_ENV
            echo "OCLOC_INSTALL_DIR=$ocloc_final_path_cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
            Write-Host "OCLOC_INSTALL_DIR set for job environment."
            $env:Path = "$ocloc_final_path;" + $env:Path
            Write-Host "ocloc_tool added to PATH for this session."
          } else {
            Write-Error "ocloc.exe not found in extracted archive! OneAPI build will likely fail."
            exit 1
          }

      - name: Debug: Print Relevant Environment Variables
        shell: pwsh
        run: |
          Write-Host "--- Environment Variables for CMake ---"
          Write-Host "CUDA_TOOLKIT_ROOT_DIR: $env:CUDA_TOOLKIT_ROOT_DIR"
          Write-Host "CUDA_PATH: $env:CUDA_PATH"
          Write-Host "OPTIX_ROOT_DIR: $env:OPTIX_ROOT_DIR"
          Write-Host "OPTIX_DIR: $env:OPTIX_DIR"
          Write-Host "OCLOC_INSTALL_DIR: $env:OCLOC_INSTALL_DIR"
          Write-Host "BLENDER_LIB: $env:BLENDER_LIB"
          Write-Host "PATH: $env:PATH"
          Write-Host "-------------------------------------"

      - name: Configure CMake
        shell: bash
        run: |
          mkdir build_windows && cd build_windows
          cmake .. \
            -C "../build_files/buildbot/config/blender_windows.cmake" \
            -G "Visual Studio 17 2022" \
            -A x64 \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -D WITH_INSTALL_PORTABLE=ON \
            -D CUDA_TOOLKIT_ROOT_DIR="${{ env.CUDA_TOOLKIT_ROOT_DIR }}" \
            -D OPTIX_ROOT_DIR="${{ env.OPTIX_ROOT_DIR }}" \
            -D OCLOC_INSTALL_DIR="${{ env.OCLOC_INSTALL_DIR }}" \
            -D CYCLES_ONEAPI_INTEL_BINARIES_ARCH="" 

      - name: Build and Install
        shell: bash
        run: |
          cd build_windows
          cmake --build . --config ${{ env.BUILD_TYPE }} --target install --parallel

      - name: Verify installation
        shell: pwsh
        run: |
          if (-not (Test-Path "install/blender.exe")) {
            Write-Error "blender.exe missing!"
            exit 1
          }
          Write-Host "Checking for Cycles GPU DLLs in install directory:"
          Get-ChildItem -Path "install" -Filter "cycles_kernel_*.dll" -Recurse | Format-List FullName, Length
          
          $expected_kernels = @(
            "install/cycles_kernel_oneapi_aot.dll", 
            "install/cycles_kernel_cuda.dll",      
            "install/cycles_kernel_optix.dll"      
          )
          foreach ($kernel in $expected_kernels) {
            if (Test-Path $kernel) {
              $file = Get-Item $kernel
              Write-Host "FOUND: $($file.Name) - Length: $($file.Length) bytes"
              if ($file.Length -lt 10240) { 
                Write-Warning "WARNING: $($file.Name) is unusually small, might be an issue (e.g., a pointer file or failed compilation)."
              }
            } else {
              Write-Warning "MISSING: $kernel"
            }
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: blender-windows-${{ env.BLENDER_VERSION }}
          path: install
